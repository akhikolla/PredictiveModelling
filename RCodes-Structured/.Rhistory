common_practices_student_work = as.numeric(folds.input.data$common_practices_student_work),
common_practices_self_assessment= as.numeric(folds.input.data$common_practices_self_assessment),
common_practices_receive_feedback = as.numeric(folds.input.data$common_practices_receive_feedback),
common_practices_student_feedback = as.numeric(folds.input.data$common_practices_student_feedback),
common_practices_state_criteria = as.numeric(folds.input.data$common_practices_state_criteria),
ETLAverage = folds.input.data$OrdinalETL,
fold = as.numeric(folds.input.data$fold),
stringsAsFactors = FALSE)
input.cols <- c("Collaborativeteams","Commonformativeassessment","Databaseddecisionmaking",
"CWIS","common_practices_can_statements",
"common_practices_student_work", "common_practices_self_assessment","common_practices_receive_feedback",
"common_practices_student_feedback","common_practices_state_criteria","fold")
weight.dt.list <- list()
for(i in 1:40){
set.seed(i)
print(i)
folds.input.data.i <-  folds.input.data[folds.input.data$fold == i,]
folds.input.data.i$OrdinalETL <- factor(folds.input.data.i$OrdinalETL,levels)
folds.input.data.i <- folds.input.data.i[,-27]
fold.i<- folds.input.data.updatedTypes[folds.input.data.updatedTypes$fold == i,]
trainind <- sort(sample(1:nrow(fold.i), size=floor(nrow(fold.i)*(3/4))))
testind <- setdiff(1:nrow(fold.i), trainind)
datatrain <- fold.i[trainind,]
datatest <- fold.i[testind,]
x_train = as.matrix(datatrain[,input.cols])
y_train = as.factor(datatrain[,11])
x_test = matrix(datatest[,input.cols])
y_obs =  datatest[,11 ]
colnames(x_train)<-NULL
rownames(x_train)<-NULL
fit1 <- ordinalNet(x_train, y_train, family="cumulative", link="logit",
parallelTerms=TRUE, nonparallelTerms=FALSE)
summary(fit1)
weight.dt.list[[i]] <- data.table(
i,
row.name=rownames(coef(fit1))[-1],
weight=coef(fit1)[-1])
print("------")
}
weight.dt <- do.call(rbind, weight.dt.list)
ggplot()+
geom_point(aes(
weight, row.name),
data=weight.dt)
weight.dt[, n.nonzero := sum(weight != 0), by=row.name]
weight.dt
row.name
coef(fit1)
rownames(coef(fit1)
)
rownames(coef(fit1))[-1]
ordnet
library(data.table)
library(glmnet)
library(ggplot2)
library(tidyverse)
library(caret)
library("ordinalNet")
library(tidyverse)
library(caret)
library("datarium")
library(ggplot2)
input.data<- data.table::fread("/Users/akhilachowdarykolla/Documents/Coding/development/PredictiveModelling/data/ReducedCoaching+CWISUpdated+NCES- binary.csv")
head(input.data)
#print(names(input.data))
#total rows = 25547
# training - 20439
# testing - 5108
colnames(input.data)[27] <- "ETLAverage"
fold.vec <- sample(rep(1:40,l=nrow(input.data)))
fold.vec <- sample(rep(1:40,l=nrow(input.data)))
folds.input.data <- data.table::data.table(input.data,fold=factor(fold.vec))
folds.input.data$OrdinalETL <- ""
for(i in 1:nrow(folds.input.data)) {
row <- folds.input.data[i,]
etlScore <- row$ETLAverage
# print(etlScore)
if (etlScore <= 1) {
folds.input.data[i,]$OrdinalETL <- "Very negative"
# print("Very negative")
} else if (etlScore > 1 && etlScore <= 2) {
folds.input.data[i,]$OrdinalETL <- "Negative"
# print("Negative")
} else if ( etlScore > 2 && etlScore <= 3) {
folds.input.data[i,]$OrdinalETL <- "Neutral"
# print("Neutral")
} else if(etlScore > 3 && etlScore <= 4){
folds.input.data[i,]$OrdinalETL <- "Very positive"
# print("Very positive")
}else{
folds.input.data[i,]$OrdinalETL <- "Positive"
# print("Positive")
}
}
folds.input.data.updatedTypes<- data.frame(Collaborativeteams = as.numeric(folds.input.data$`Collaborative teams`),
Commonformativeassessment = as.integer(folds.input.data$`Common formative assessment`),
Databaseddecisionmaking = as.numeric(folds.input.data$`Data-based decision making`),
CWIS = as.numeric(folds.input.data$CWIS),
common_practices_can_statements =as.numeric(folds.input.data$common_practices_can_statements),
common_practices_student_work = as.numeric(folds.input.data$common_practices_student_work),
common_practices_self_assessment= as.numeric(folds.input.data$common_practices_self_assessment),
common_practices_receive_feedback = as.numeric(folds.input.data$common_practices_receive_feedback),
common_practices_student_feedback = as.numeric(folds.input.data$common_practices_student_feedback),
common_practices_state_criteria = as.numeric(folds.input.data$common_practices_state_criteria),
ETLAverage = folds.input.data$ETLAverage,
fold = as.numeric(folds.input.data$fold),
stringsAsFactors = FALSE)
ETLinput.data.updatedTypes<- data.frame(Collaborativeteams = as.numeric(folds.input.data$`Collaborative teams`),
Commonformativeassessment = as.integer(folds.input.data$`Common formative assessment`),
Databaseddecisionmaking = as.numeric(folds.input.data$`Data-based decision making`),
CWIS = as.numeric(folds.input.data$CWIS),
common_practices_can_statements =as.numeric(folds.input.data$common_practices_can_statements),
common_practices_student_work = as.numeric(folds.input.data$common_practices_student_work),
common_practices_self_assessment= as.numeric(folds.input.data$common_practices_self_assessment),
common_practices_receive_feedback = as.numeric(folds.input.data$common_practices_receive_feedback),
common_practices_student_feedback = as.numeric(folds.input.data$common_practices_student_feedback),
common_practices_state_criteria = as.numeric(folds.input.data$common_practices_state_criteria),
ETLAverage = folds.input.data$OrdinalETL,
fold = as.numeric(folds.input.data$fold),
stringsAsFactors = FALSE)
input.cols <- c("Collaborativeteams","Commonformativeassessment","Databaseddecisionmaking",
"CWIS","common_practices_can_statements",
"common_practices_student_work", "common_practices_self_assessment","common_practices_receive_feedback",
"common_practices_student_feedback","common_practices_state_criteria","fold")
final.accuracy.list <- list()
accuracy.dt <- list()
predictions.list <- list()
for(i in 1:40){
set.seed(i)
print(i)
folds.input.data.i <-  folds.input.data[folds.input.data$fold == i,]
folds.input.data.i$OrdinalETL <- factor(folds.input.data.i$OrdinalETL,levels)
folds.input.data.i <- folds.input.data.i[,-27]
fold.i<- folds.input.data.updatedTypes[folds.input.data.updatedTypes$fold == i,]
trainind <- sort(sample(1:nrow(fold.i), size=floor(nrow(fold.i)*(3/4))))
testind <- setdiff(1:nrow(fold.i), trainind)
datatrain <- fold.i[trainind,]
datatest <- fold.i[testind,]
x = as.matrix(datatrain[,input.cols])
y = datatrain[,11 ]
x_train = as.matrix(datatrain[,input.cols])
y_train = as.factor(datatrain[,11])
x_test = matrix(datatest[,input.cols])
y_obs =  datatest[,11 ]
x_net = as.matrix(datatrain[,input.cols])
# y_net = as.factor(datatrain[,11])
colnames(x_net)<-NULL
rownames(x_net)<-NULL
cv.fit.gaussian <- cv.glmnet(x_train,y_train)
ordnet <- ordinalNet(x_net, y_train, family="cumulative", link="logit",
parallelTerms=TRUE, nonparallelTerms=FALSE)
print(ordnet)
predictions.list <-  list(
glmnet.gaussian=as.numeric(predict(cv.fit.gaussian,newx=as.matrix(datatest[,input.cols]),s=cv.fit.gaussian$lambda.1se,type="response")),
baseline.l0=one.pred(as.numeric.factor(freq[which.max(freq$Freq),]$y)),
baseline.l1=one.pred(median.ind.val),
baseline.l2=one.pred(mean.ind.val),
ordnet.pred = ordnet)
}
for(i in 1:40){
set.seed(i)
print(i)
folds.input.data.i <-  folds.input.data[folds.input.data$fold == i,]
folds.input.data.i$OrdinalETL <- factor(folds.input.data.i$OrdinalETL,levels)
folds.input.data.i <- folds.input.data.i[,-27]
fold.i<- folds.input.data.updatedTypes[folds.input.data.updatedTypes$fold == i,]
trainind <- sort(sample(1:nrow(fold.i), size=floor(nrow(fold.i)*(3/4))))
testind <- setdiff(1:nrow(fold.i), trainind)
datatrain <- fold.i[trainind,]
datatest <- fold.i[testind,]
x = as.matrix(datatrain[,input.cols])
y = datatrain[,11 ]
x_train = as.matrix(datatrain[,input.cols])
y_train = as.factor(datatrain[,11])
x_test = matrix(datatest[,input.cols])
y_obs =  datatest[,11 ]
x_net = as.matrix(datatrain[,input.cols])
# y_net = as.factor(datatrain[,11])
colnames(x_net)<-NULL
rownames(x_net)<-NULL
cv.fit.gaussian <- cv.glmnet(x_train,y)
ordnet <- ordinalNet(x_net, y_train, family="cumulative", link="logit",
parallelTerms=TRUE, nonparallelTerms=FALSE)
print(ordnet)
predictions.list <-  list(
glmnet.gaussian=as.numeric(predict(cv.fit.gaussian,newx=as.matrix(datatest[,input.cols]),s=cv.fit.gaussian$lambda.1se,type="response")),
baseline.l0=one.pred(as.numeric.factor(freq[which.max(freq$Freq),]$y)),
baseline.l1=one.pred(median.ind.val),
baseline.l2=one.pred(mean.ind.val),
ordnet.pred = ordnet)
}
predictions.list
ordnet.pred
i <- 1
set.seed(i)
print(i)
folds.input.data.i <-  folds.input.data[folds.input.data$fold == i,]
folds.input.data.i$OrdinalETL <- factor(folds.input.data.i$OrdinalETL,levels)
folds.input.data.i <- folds.input.data.i[,-27]
fold.i<- folds.input.data.updatedTypes[folds.input.data.updatedTypes$fold == i,]
trainind <- sort(sample(1:nrow(fold.i), size=floor(nrow(fold.i)*(3/4))))
testind <- setdiff(1:nrow(fold.i), trainind)
datatrain <- fold.i[trainind,]
datatest <- fold.i[testind,]
x = as.matrix(datatrain[,input.cols])
y = datatrain[,11 ]
x_train = as.matrix(datatrain[,input.cols])
y_train = as.factor(datatrain[,11])
x_test = matrix(datatest[,input.cols])
y_obs =  datatest[,11 ]
x_net = as.matrix(datatrain[,input.cols])
# y_net = as.factor(datatrain[,11])
colnames(x_net)<-NULL
rownames(x_net)<-NULL
ordnet <- ordinalNet(x_net, y_train, family="cumulative", link="logit",
parallelTerms=TRUE, nonparallelTerms=FALSE)
predict(fit1, type="response")
predict(fit1, type="class")
x_test = as.matrix(datatest[,input.cols])
predict(fit1,newx=x_test, type="response")
predict(fit1,newx=x_test, type="class")
x5 <- head(x_train,100)
y5 <- head(y_train,100)
x5 <- head(x_train,10)
y5 <- head(y_train,10)
x5
y5
fit1 <- ordinalNet(x_5, y_5, family="cumulative", link="logit",
parallelTerms=TRUE, nonparallelTerms=FALSE)
fit1 <- ordinalNet(x5, y5, family="cumulative", link="logit",
parallelTerms=TRUE, nonparallelTerms=FALSE)
fit;
fit1
xt <- head(x_tests,10)
yt <- head(y_obs,5)
xt <- head(x_test,10)
yt <- head(y_obs,5)
y_train = as.factor(datatrain[,11])
x_test = as.matrix(datatest[,input.cols])
xt <- head(x_test,10)
yt <- head(y_obs,5)
xt
colnames(x_test)<-NULL
rownames(x_test)<-NULL
xt <- head(x_test,10)
yt <- head(y_obs,5)
predict(fit1,newx=xt, type="response")
predict(fit1,newx=xt, type="class")
fit2 <- ordinalNet(x5, y5, family="cumulative", link="logit",
parallelTerms=FALSE, nonparallelTerms=TRUE)
fit2 <- ordinalNet(x5, y5, family="cumulative", link="logit",
parallelTerms=FALSE, nonparallelTerms=TRUE)
fit2
predict(fit2,newx=xt, type="response")
predict(fit2,newx=xt, type="class")
fit3 <- ordinalNet(x5, y5, family="cumulative", link="logit",
parallelTerms=TRUE, nonparallelTerms=TRUE)
predict(fit3,newx=xt, type="response")
predict(fit3,newx=xt, type="class")
library("ordinalNet")
library("ordinalgmifs")
data("hccframe")
y <- hccframe$group
x <- as.matrix(subset(hccframe, select = -group))
x
fit1 <- ordinalNet(x, y, family = "cumulative", link = "logit",
+ parallelTerms = TRUE, nonparallelTerms = FALSE)
fit1 <- ordinalNet(x, y, family = "cumulative", link = "logit",
parallelTerms = TRUE, nonparallelTerms = FALSE)
fit1
head(summary(fit1))
head(coef(fit1, matrix = TRUE))
x
class(x)
str(x)
library("ordinalNet")
library(tidyverse)
library(caret)
library("datarium")
library(ggplot2)
#/Users/akhilachowdarykolla/Desktop/ReducedCoaching+CWISUpdated+NCES.csv
input.data <- data.table::fread("/Users/akhilachowdarykolla/Downloads/ReducedCoaching+CWISUpdated+NCES- binary.csv")
head(input.data)
print(names(input.data))
#total rows = 25547
# training - 20439
# testing - 5108
input.data.updatedTypes<- data.frame(Collaborativeteams = as.numeric(input.data$`Collaborative teams`),
Commonformativeassessment = as.integer(input.data$`Common formative assessment`),
Databaseddecisionmaking = as.numeric(input.data$`Data-based decision making`),
CWIS = as.numeric(input.data$CWIS),
common_practices_can_statements =as.numeric(input.data$common_practices_can_statements),
common_practices_student_work = as.numeric(input.data$common_practices_student_work),
common_practices_self_assessment= as.numeric(input.data$common_practices_self_assessment),
common_practices_receive_feedback = as.numeric(input.data$common_practices_receive_feedback),
common_practices_student_feedback = as.numeric(input.data$common_practices_student_feedback),
common_practices_state_criteria = as.numeric(input.data$common_practices_state_criteria),
ETLAverage = input.data$`ETL AVERAGE`,
LocaleCode = as.numeric(input.data$`Locale Code*`),
students= as.numeric(input.data$`Students*`),
teachers = as.numeric(input.data$`Teachers*`),
studentTeacherRatio = as.numeric(input.data$`Student Teacher Ratio*`),
ReducedLunch= as.numeric(input.data$`Reduced Lunch*`),
freelunch = as.numeric(input.data$`Free Lunch*`),
CollectiveTeacherEfficacy=as.numeric(input.data$`Collective teacher efficacy`),
schoolBasedCoaching = as.numeric(input.data$`School-based implementation coaching`),
instructionalLeadership = as.numeric(input.data$`Instructional Leadership`),
teachingLearningPractices = as.numeric(input.data$`Effective teaching/learning practices`),
stringsAsFactors = FALSE)
input.cols <- c("Collaborativeteams","Commonformativeassessment","Databaseddecisionmaking",
"CWIS","common_practices_can_statements",
"common_practices_student_work", "common_practices_self_assessment","common_practices_receive_feedback",
"common_practices_student_feedback","common_practices_state_criteria","LocaleCode","students","teachers",
"studentTeacherRatio","ReducedLunch","freelunch","CollectiveTeacherEfficacy","schoolBasedCoaching",
"instructionalLeadership","teachingLearningPractices")
trainind <- sort(sample(1:nrow(input.data.updatedTypes), size=floor(nrow(input.data.updatedTypes)*(3/4))))
testind <- setdiff(1:nrow(input.data.updatedTypes), trainind)
datatrain <- input.data.updatedTypes[trainind,]
datatest <- input.data.updatedTypes[testind,]
x_train = as.matrix(datatrain[,input.cols])
y_train = as.factor(datatrain[,11])
x_test = as.matrix(datatest[,input.cols])
y_obs =  datatest[,11 ]
head(x_train)
str(x_train)
str(x)
library("ordinalNet")
library(tidyverse)
library(caret)
library("datarium")
library(ggplot2)
#/Users/akhilachowdarykolla/Desktop/ReducedCoaching+CWISUpdated+NCES.csv
input.data <- data.table::fread("/Users/akhilachowdarykolla/Downloads/ReducedCoaching+CWISUpdated+NCES- binary.csv")
head(input.data)
print(names(input.data))
#total rows = 25547
# training - 20439
# testing - 5108
input.data.updatedTypes<- data.frame(Collaborativeteams = as.numeric(input.data$`Collaborative teams`),
Commonformativeassessment = as.integer(input.data$`Common formative assessment`),
Databaseddecisionmaking = as.numeric(input.data$`Data-based decision making`),
CWIS = as.numeric(input.data$CWIS),
common_practices_can_statements =as.numeric(input.data$common_practices_can_statements),
common_practices_student_work = as.numeric(input.data$common_practices_student_work),
common_practices_self_assessment= as.numeric(input.data$common_practices_self_assessment),
common_practices_receive_feedback = as.numeric(input.data$common_practices_receive_feedback),
common_practices_student_feedback = as.numeric(input.data$common_practices_student_feedback),
common_practices_state_criteria = as.numeric(input.data$common_practices_state_criteria),
ETLAverage = input.data$`ETL AVERAGE`,
LocaleCode = as.numeric(input.data$`Locale Code*`),
students= as.numeric(input.data$`Students*`),
teachers = as.numeric(input.data$`Teachers*`),
studentTeacherRatio = as.numeric(input.data$`Student Teacher Ratio*`),
ReducedLunch= as.numeric(input.data$`Reduced Lunch*`),
freelunch = as.numeric(input.data$`Free Lunch*`),
CollectiveTeacherEfficacy=as.numeric(input.data$`Collective teacher efficacy`),
schoolBasedCoaching = as.numeric(input.data$`School-based implementation coaching`),
instructionalLeadership = as.numeric(input.data$`Instructional Leadership`),
teachingLearningPractices = as.numeric(input.data$`Effective teaching/learning practices`),
stringsAsFactors = FALSE)
input.cols <- c("Collaborativeteams","Commonformativeassessment","Databaseddecisionmaking",
"CWIS","common_practices_can_statements",
"common_practices_student_work", "common_practices_self_assessment","common_practices_receive_feedback",
"common_practices_student_feedback","common_practices_state_criteria","LocaleCode","students","teachers",
"studentTeacherRatio","ReducedLunch","freelunch","CollectiveTeacherEfficacy","schoolBasedCoaching",
"instructionalLeadership","teachingLearningPractices")
trainind <- sort(sample(1:nrow(input.data.updatedTypes), size=floor(nrow(input.data.updatedTypes)*(3/4))))
testind <- setdiff(1:nrow(input.data.updatedTypes), trainind)
datatrain <- input.data.updatedTypes[trainind,]
datatest <- input.data.updatedTypes[testind,]
x_train = as.matrix(datatrain[,input.cols])
y_train = as.factor(datatrain[,11])
x_test = as.matrix(datatest[,input.cols])
y_obs =  datatest[,11 ]
str(x_train)
str(x)
x_train
x_train
library("ordinalNet")
library(tidyverse)
library(caret)
library("datarium")
library(ggplot2)
#/Users/akhilachowdarykolla/Desktop/ReducedCoaching+CWISUpdated+NCES.csv
input.data <- data.table::fread("/Users/akhilachowdarykolla/Downloads/ReducedCoaching+CWISUpdated+NCES- binary.csv")
head(input.data)
print(names(input.data))
#total rows = 25547
# training - 20439
# testing - 5108
input.data.updatedTypes<- data.frame(Collaborativeteams = as.numeric(input.data$`Collaborative teams`),
Commonformativeassessment = as.integer(input.data$`Common formative assessment`),
Databaseddecisionmaking = as.numeric(input.data$`Data-based decision making`),
CWIS = as.numeric(input.data$CWIS),
common_practices_can_statements =as.numeric(input.data$common_practices_can_statements),
common_practices_student_work = as.numeric(input.data$common_practices_student_work),
common_practices_self_assessment= as.numeric(input.data$common_practices_self_assessment),
common_practices_receive_feedback = as.numeric(input.data$common_practices_receive_feedback),
common_practices_student_feedback = as.numeric(input.data$common_practices_student_feedback),
common_practices_state_criteria = as.numeric(input.data$common_practices_state_criteria),
ETLAverage = input.data$`ETL AVERAGE`,
LocaleCode = as.numeric(input.data$`Locale Code*`),
students= as.numeric(input.data$`Students*`),
teachers = as.numeric(input.data$`Teachers*`),
studentTeacherRatio = as.numeric(input.data$`Student Teacher Ratio*`),
ReducedLunch= as.numeric(input.data$`Reduced Lunch*`),
freelunch = as.numeric(input.data$`Free Lunch*`),
CollectiveTeacherEfficacy=as.numeric(input.data$`Collective teacher efficacy`),
schoolBasedCoaching = as.numeric(input.data$`School-based implementation coaching`),
instructionalLeadership = as.numeric(input.data$`Instructional Leadership`),
teachingLearningPractices = as.numeric(input.data$`Effective teaching/learning practices`),
stringsAsFactors = FALSE)
input.cols <- c("Collaborativeteams","Commonformativeassessment","Databaseddecisionmaking",
"CWIS","common_practices_can_statements",
"common_practices_student_work", "common_practices_self_assessment","common_practices_receive_feedback",
"common_practices_student_feedback","common_practices_state_criteria","LocaleCode","students","teachers",
"studentTeacherRatio","ReducedLunch","freelunch","CollectiveTeacherEfficacy","schoolBasedCoaching",
"instructionalLeadership","teachingLearningPractices")
trainind <- sort(sample(1:nrow(input.data.updatedTypes), size=floor(nrow(input.data.updatedTypes)*(3/4))))
testind <- setdiff(1:nrow(input.data.updatedTypes), trainind)
datatrain <- input.data.updatedTypes[trainind,]
datatest <- input.data.updatedTypes[testind,]
x_train = as.matrix(datatrain[,input.cols])
x_train
library("ordinalNet")
library(tidyverse)
library(caret)
library("datarium")
library(ggplot2)
#/Users/akhilachowdarykolla/Desktop/ReducedCoaching+CWISUpdated+NCES.csv
input.data <- data.table::fread("/Users/akhilachowdarykolla/Documents/Coding/development/PredictiveModelling/data/ReducedCoaching+CWISUpdated+NCES- binary.csv")
head(input.data)
print(names(input.data))
input.data.updatedTypes<- data.frame(Collaborativeteams = as.numeric(input.data$`Collaborative teams`),
Commonformativeassessment = as.integer(input.data$`Common formative assessment`),
Databaseddecisionmaking = as.numeric(input.data$`Data-based decision making`),
CWIS = as.numeric(input.data$CWIS),
common_practices_can_statements =as.numeric(input.data$common_practices_can_statements),
common_practices_student_work = as.numeric(input.data$common_practices_student_work),
common_practices_self_assessment= as.numeric(input.data$common_practices_self_assessment),
common_practices_receive_feedback = as.numeric(input.data$common_practices_receive_feedback),
common_practices_student_feedback = as.numeric(input.data$common_practices_student_feedback),
common_practices_state_criteria = as.numeric(input.data$common_practices_state_criteria),
ETLAverage = input.data$`ETL AVERAGE`,
LocaleCode = as.numeric(input.data$`Locale Code*`),
students= as.numeric(input.data$`Students*`),
teachers = as.numeric(input.data$`Teachers*`),
studentTeacherRatio = as.numeric(input.data$`Student Teacher Ratio*`),
ReducedLunch= as.numeric(input.data$`Reduced Lunch*`),
freelunch = as.numeric(input.data$`Free Lunch*`),
CollectiveTeacherEfficacy=as.numeric(input.data$`Collective teacher efficacy`),
schoolBasedCoaching = as.numeric(input.data$`School-based implementation coaching`),
instructionalLeadership = as.numeric(input.data$`Instructional Leadership`),
teachingLearningPractices = as.numeric(input.data$`Effective teaching/learning practices`),
stringsAsFactors = FALSE)
input.cols <- c("Collaborativeteams","Commonformativeassessment","Databaseddecisionmaking",
"CWIS","common_practices_can_statements",
"common_practices_student_work", "common_practices_self_assessment","common_practices_receive_feedback",
"common_practices_student_feedback","common_practices_state_criteria","LocaleCode","students","teachers",
"studentTeacherRatio","ReducedLunch","freelunch","CollectiveTeacherEfficacy","schoolBasedCoaching",
"instructionalLeadership","teachingLearningPractices")
trainind <- sort(sample(1:nrow(input.data.updatedTypes), size=floor(nrow(input.data.updatedTypes)*(3/4))))
testind <- setdiff(1:nrow(input.data.updatedTypes), trainind)
datatrain <- input.data.updatedTypes[trainind,]
datatest <- input.data.updatedTypes[testind,]
x_train = as.matrix(datatrain[,input.cols])
y_train = as.factor(datatrain[,11])
x_test = as.matrix(datatest[,input.cols])
y_obs =  datatest[,11 ]
path <- "/Users/akhilachowdarykolla/Documents/Coding/development/PredictiveModelling/data/"
str(x_train)
library("ordinalNet")
library("ordinalgmifs")
data("hccframe")
y <- hccframe$group
x <- as.matrix(subset(hccframe, select = -group))
fit1 <- ordinalNet(x, y, family = "cumulative", link = "logit",
parallelTerms = TRUE, nonparallelTerms = FALSE)
str(x)
str(x_train)
str(y)
str(y_train)
fit1 <- ordinalNet(x_train, y_train, family = "cumulative", link = "logit",
parallelTerms = TRUE, nonparallelTerms = FALSE)
fit1 <- ordinalNet(head(x_train), head(y_train), family = "cumulative", link = "logit",
parallelTerms = TRUE, nonparallelTerms = FALSE)
fit1 <- ordinalNet(head(x_train), head(y_train), family = "cumulative", link = "logit",
parallelTerms = TRUE, nonparallelTerms = FALSE)
fit1 <- ordinalNet(head(x_train), head(y_train), family = "cumulative", link = "logit",
parallelTerms = TRUE, nonparallelTerms = FALSE)
fit1
predict(fit1,newx=x_test, type="response")
ord.forest.trainind <- sort(sample(1:nrow(folds.input.data.i), size=floor(nrow(folds.input.data.i)*(3/4))))
ord.forest.testind <- setdiff(1:nrow(folds.input.data.i), trainind)
ord.forest.datatrain <- folds.input.data.i[ord.forest.trainind,]
ord.forest.datatest <- folds.input.data.i[ord.forest.testind,]
input.data <- data.table::fread("/Users/akhilachowdarykolla/Documents/Coding/development/PredictiveModelling/Copy of ncesdata_ECCDA30A.xlsx")
head(input.data)
print(names(input.data))
ncesdata <- data.table::fread("/Users/akhilachowdarykolla/Documents/Coding/development/PredictiveModelling/Copy of ncesdata_ECCDA30A.xlsx")
head(ncesdata)
print(names(ncesdata))
nces.data <-  ncesdata[-(1:15), ]
nces.data <-  ncesdata[-(1:15), ]
nces.data
ncesdata <- data.table::fread("/Users/akhilachowdarykolla/Documents/Coding/development/PredictiveModelling/Copy of ncesdata_ECCDA30A 2")
ncesdata <- data.table::fread("/Users/akhilachowdarykolla/Documents/Coding/development/PredictiveModelling/Copy of ncesdata_ECCDA30A 2.csv")
head(ncesdata)
cwisdata <- data.table::fread("/Users/akhilachowdarykolla/Documents/Coding/development/PredictiveModelling/cwis_survey data 10-1.xlsx")
cwisdata <- data.table::fread("/Users/akhilachowdarykolla/Documents/Coding/development/PredictiveModelling/cwis_survey data 10-1.xlsx")
fread()
fread()
