# -*- coding: utf-8 -*-
"""DataAnalysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zDd0HH0owj-F-TBIdeElF38O2pDvK6xm
"""

import pandas as pd
import numpy as np
import missingno as msno

import warnings 
warnings.filterwarnings("ignore")
import seaborn as sns

from pandas.plotting import parallel_coordinates

df = pd.DataFrame(pd.read_excel("/content/Coaching logs Fall 2017- Spring 2021.xlsx"))

# print("Shape of the data (rows,cols) :",df.shape)

# columnNames = list(df.columns)
# print("List of Column names :",columnNames)

# ListofDistricts = df['This is for . . .']

# ListofDistricts.unique()

# ListPerDistrict = {'Early - East' : [], 'Developing - West':[], 'Developing 1 - East':[],
#        'Developing 2 - East' : [], 'Early - West' : [], 'Full - East' : [],
#        'Full - West':[], 'Initial - East':[], 'Initial - West':[],
#        'New Districts - East':[], 'New Districts - West':[]} 

# print("kesy",ListPerDistrict.keys())
# print(cols)
# # for cols in ListofDistricts:
# #   if cols in ListPerDistrict.keys():
    
# for index, row in df.iterrows():
#   print("index ",index)
#   # print(row)
#   # print("Accessed row :",row['This is for . . .'])
#   # print("----------")
#   # print("accessed row value districts")
#   cols = row['This is for . . .']
#   if index != 1404:
#     if(cols == "nan"):
#       print("dont do anything")
#       continue
#     if(cols == 'New Districts - West'):
#       ListPerDistrict[cols].append(df[~pd.isnull(df[cols])].iloc[index])
#     else: 
#       # print("Accessing column", (cols + " Districts"))df["column"]
#       print("Value to be appended",df[~pd.isnull(df[cols + " Districts"])].iloc[index])
#       ListPerDistrict[cols].append(df[~pd.isnull(df[cols + " Districts"])].iloc[index])
#   # cols = rows['This is for . . .']
#   # if cols in ListPerDistrict.keys():
#   #   if(cols == 'New Districts - West'):
#   #      ListPerDistrict[cols].append(df[cols])
#   #   else: 
#   #      ListPerDistrict[cols].append(df[cols + " Districts"])

app = df.head(2008)
app


ListPerDistrict = {'Early - East' : [], 'Developing - West':[], 'Developing 1 - East':[],
       'Developing 2 - East' : [], 'Early - West' : [], 'Full - East' : [],
       'Full - West':[], 'Initial - East':[], 'Initial - West':[],
       'New Districts - East':[], 'New Districts - West':[]} 

for index, row in app.iterrows():
  # print("index ",index)
  cols = row['This is for . . .']
  if index != 1404:
    if(cols == 'New Districts - West'):
      # print("In New before :",df[cols].iloc[index])
      # print("boolean check in new districts west",~pd.isnull(df[cols].iloc[index]))
      if(~pd.isnull(df[cols].iloc[index])):  
        # print("In New :",df[cols].iloc[index])
        # print("=-------------=---------------=")
        ListPerDistrict[cols].append(df[cols].iloc[index])
    else: 
        # print("Accessing column", (cols + " Districts"))df["column"]
        # print("Cols for error" , cols)
        # print("Value to be appended before : ",df[cols + " Districts"].iloc[index])
        # print("boolean check ",~pd.isnull(df[cols + " Districts"].iloc[index]))
         if(~pd.isnull(df[cols + " Districts"].iloc[index])):  
            # print("Value to be appended",df[cols + " Districts"].iloc[index])
            # print("=-------------=---------------=")
            ListPerDistrict[cols].append(df[cols + " Districts"].iloc[index])

# ListPerDistrict

for key,values in ListPerDistrict.items():
    # print("Key :",key)
    # print("----------------")
    # print("Value : ", values)
    # print("****************")
    ListPerDistrict[key] = set(values)

All_Districts_List = []
for key,values in ListPerDistrict.items():
  print("Number of Districts in " , key , " is :", len(values))
  All_Districts_List.append(list(values))


List_Of_Districts_CWIS = sum(All_Districts_List, [])
# List_Of_Districts_CWIS

NCES_Data = pd.DataFrame(pd.read_excel("/content/Copy of ncesdata_ECCDA30A (1).xlsx"))
print("Shape of the data (rows,cols) :",NCES_Data.shape)

columnNames = list(NCES_Data.columns)
print("List of Column names :",columnNames)

List_Of_Districts_NCES = list(NCES_Data['District'])
print("Len before unique " , len(List_Of_Districts_NCES))
List_Of_Districts_NCES = set(List_Of_Districts_NCES)
print("Len after unique NCES" , len(List_Of_Districts_NCES))
print("Len after unique CWIS",len(List_Of_Districts_CWIS) )

def intersection(lst1, lst2):
    lst3 = [value for value in lst1 if value in lst2]
    return lst3
Common_Districts_NCES_and_CWIS = intersection(List_Of_Districts_CWIS,List_Of_Districts_NCES)
print("Len of Common CWIS&NCES districts",len(Common_Districts_NCES_and_CWIS) )

Not_Common_Districts_NCES_and_CWIS = []
for i in List_Of_Districts_CWIS:
    if i not in List_Of_Districts_NCES:
        Not_Common_Districts_NCES_and_CWIS.append(i)
for i in List_Of_Districts_NCES:
    if i not in List_Of_Districts_CWIS:
        Not_Common_Districts_NCES_and_CWIS.append(i)

Not_Common_Districts_NCES_and_CWIS
print("Len of UnCommon CWIS&NCES districts",len(Not_Common_Districts_NCES_and_CWIS) )

CWIScolumnNames = list(app.columns)
for i in CWIScolumnNames:
  print(i)



